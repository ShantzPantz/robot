#include "config.h"
#include <Arduino.h>
#include <network_manager.h>
#include <driver/i2s.h>
#include <WebSocketsClient.h>

// I2S pin definitions for audio output
const i2s_port_t I2S_PORT = I2S_NUM_0;
#define I2S_WS       25
#define I2S_SCK      26
#define I2S_MIC_SD   34
#define I2S_DAC_SD   22

#define I2S_SAMPLE_RATE   16000
#define I2S_SAMPLE_BITS   16
#define I2S_READ_LEN      256
#define I2S_FORMAT        I2S_CHANNEL_FMT_ONLY_LEFT
#define I2S_PORT          I2S_NUM_0

// Define input buffer length
#define bufferLen 64
int16_t sBuffer[bufferLen];

#define CHUNK_SIZE 128 // how much to process per loop cycle

NetworkManager networkManager;

uint8_t *audioBuffer;

enum State {
  RECORDING,
  PLAYING,
  IDLE
};

State currentState = RECORDING;
size_t recordIndex = 0;
size_t playIndex = 0;

void setupI2S() {
  i2s_config_t i2s_config = {
    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_TX | I2S_MODE_RX),
    .sample_rate = I2S_SAMPLE_RATE,
    .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
    .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
    .communication_format = I2S_COMM_FORMAT_I2S,
    .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
    .dma_buf_count = 8,
    .dma_buf_len = 512,
    .use_apll = false,
    .tx_desc_auto_clear = true,
    .fixed_mclk = 0
  };

  i2s_pin_config_t pin_config = {
    .bck_io_num = I2S_SCK,
    .ws_io_num = I2S_WS,
    .data_out_num = I2S_DAC_SD,
    .data_in_num = I2S_MIC_SD
  };

  i2s_driver_install(I2S_NUM_0, &i2s_config, 0, NULL);
  i2s_set_pin(I2S_NUM_0, &pin_config);
  // i2s_set_clk(I2S_NUM_0, SAMPLE_RATE, I2S_BITS_PER_SAMPLE_16BIT, I2S_CHANNEL_MONO);
}

WebSocketsClient webSocket;


void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) {
  switch(type) {
    case WStype_DISCONNECTED:
      Serial.println("[WS] Disconnected");
      break;
    case WStype_CONNECTED:
      Serial.printf("[WS] Connected: %s\n", payload);
      break;
    case WStype_TEXT:
      Serial.printf("[WS] Text: %s\n", payload);
      break;
    case WStype_BIN:
      Serial.printf("[WS] Binary len: %u\n", length);
      break;
    case WStype_ERROR:
      Serial.println("[WS] Error occurred!");
      break;
    case WStype_PING:
      Serial.println("[WS] Ping!");
      break;
    case WStype_PONG:
      Serial.println("[WS] Pong!");
      break;
  }
}


void setup() {
  Serial.begin(115200);
  delay(100);
  Serial.println("\n--- Starting esp32_audio ---");

  // --- Connect to Wi-Fi and handle network services ---
  networkManager.init();
  delay(250);

  networkManager.debugPrint("Setting up I2S."); 

  // server address, port and URL
	webSocket.begin("shantz-ubuntu", 8000, "/ws");

	// event handler
	webSocket.onEvent(webSocketEvent);

	// use HTTP Basic Authorization this is optional remove if not needed
	// webSocket.setAuthorization("user", "Password");

	// try ever 5000 again if connection has failed
	webSocket.setReconnectInterval(5000);

  // audioBuffer = (uint8_t *)ps_malloc(BUFFER_SIZE);
  // if (!audioBuffer) {
  //   networkManager.debugPrint("Failed to allocate audio buffer!");
  //   while (true);
  // }
  setupI2S();
}

void loop() {

  // False print statements to "lock range" on serial plotter display
  // Change rangelimit value to adjust "sensitivity"
  int rangelimit = 3000;
  Serial.print(rangelimit * -1);
  Serial.print(" ");
  Serial.print(rangelimit);
  Serial.print(" ");

  // Get I2S data and place in data buffer
  size_t bytesIn = 0;
  esp_err_t result = i2s_read(I2S_PORT, &sBuffer, bufferLen, &bytesIn, portMAX_DELAY);

  if (result == ESP_OK)
  {
    // Read I2S data buffer
    int16_t samples_read = bytesIn / 8;
    if (samples_read > 0) {
      float mean = 0;
      for (int16_t i = 0; i < samples_read; ++i) {
        mean += (sBuffer[i]);
      }

      // Average the data reading
      mean /= samples_read;

      // Print to serial plotter
      Serial.println(mean);
    }
  }
}

// void loop() {
//   networkManager.loop();   // OTA / MQTT
  
//   static uint8_t i2s_read_buff[I2S_READ_LEN];
//   size_t bytes_read = 0;
//   i2s_read(I2S_PORT, (void*) i2s_read_buff, I2S_READ_LEN, &bytes_read, 10 / portTICK_PERIOD_MS);

//   if(bytes_read > 0 && webSocket.isConnected()) {
//       unsigned long t0 = millis();
//       webSocket.sendBIN(i2s_read_buff, bytes_read);
//       unsigned long t1 = millis();
//       webSocket.loop();
//       Serial.printf("Sent %d bytes, send took %lu ms\n", bytes_read, t1 - t0);
//   }



//   // Debug heap every ~10s
//   static unsigned long lastHeapCheck = 0;
//   if (millis() - lastHeapCheck > 10000) {
//     Serial.printf("Free heap: %u\n", ESP.getFreeHeap());
//     lastHeapCheck = millis();
//   }
// }
